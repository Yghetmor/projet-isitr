{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../environment/environment\";\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\n//import {catchError, Observable} from 'rxjs';\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = `${environment.urlApi}`;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  register(email, password, noSiren) {\n    const role = {\n      roleType: 'ROLE_USER_EMPLOYER'\n    };\n    return this.http.post(`${this.url}/signup`, {\n      email,\n      password,\n      noSiren,\n      role\n    }, this.httpOptions);\n  }\n  login(email, password) {\n    return this.http.post(`${this.url}/signin`, {\n      email,\n      password\n    }, this.httpOptions).pipe(tap(response => {\n      if (response && response.accessToken) {\n        localStorage.setItem('access_token', response.accessToken);\n        localStorage.setItem('account_role', response.roles);\n      }\n    }), catchError(error => {\n      throw error;\n    }));\n  }\n  getAccountRole() {\n    return localStorage.getItem('account_role');\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  logout() {\n    // Clear the access token and the user's role\n    localStorage.clear();\n    this.router.navigate(['home']);\n    // Optionally, redirect the user to the login page or home page\n    // This depends on your routing setup\n    // this.router.navigate(['/login']);\n  }\n  // This could be part of your AuthService or a dedicated AuthGuard\n  isValidSession() {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      return false;\n    }\n    // Here you would add logic to check the token's validity\n    // For example, decode the JWT and check the exp claim, if applicable\n    // If the token is expired or invalid:\n    // localStorage.removeItem('access_token');\n    // localStorage.removeItem('account_role');\n    // return false;\n    return true;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;AAC5D,SAAQC,WAAW,QAAO,4BAA4B;AACtD,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAGhD;AAKA,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAN5C,QAAG,GAAG,GAAGN,WAAW,CAACO,MAAM,EAAE;IAE7B,gBAAW,GAAG;MACpBC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAE+D;EAEhEU,QAAQ,CAACC,KAAa,EAAEC,QAAgB,EAAEC,OAAe;IACvD,MAAMC,IAAI,GAAG;MACXC,QAAQ,EAAE;KACX;IAED,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,GAAI,IAAI,CAACC,GAAI,SAAS,EAC1C;MACEN,KAAK;MACLC,QAAQ;MACRC,OAAO;MACPC;KACD,EACD,IAAI,CAACI,WAAW,CACjB;EAEH;EAEAC,KAAK,CAACR,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACN,IAAI,CAACU,IAAI,CAAC,GAAI,IAAI,CAACC,GAAI,SAAS,EAC1C;MACEN,KAAK;MACLC;KACD,EACD,IAAI,CAACM,WAAW,CACf,CACAE,IAAI,CACHjB,GAAG,CAAEkB,QAAY,IAAI;MACnB,IAAGA,QAAQ,IAAIA,QAAQ,CAACC,WAAW,EAAC;QAClCC,YAAY,CAACC,OAAO,CAAE,cAAc,EAAGH,QAAQ,CAACC,WAAW,CAAC;QAC5DC,YAAY,CAACC,OAAO,CAAE,cAAc,EAAGH,QAAQ,CAACI,KAAK,CAAC;;IAE1D,CAAC,CAAC,EACFvB,UAAU,CAAEwB,KAAK,IAAI;MACnB,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACL;EAEAC,cAAc;IACZ,OAAOJ,YAAY,CAACK,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAC,QAAQ;IACN,OAAON,YAAY,CAACK,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAE,MAAM;IACJ;IACAP,YAAY,CAACQ,KAAK,EAAE;IACpB,IAAI,CAACxB,MAAM,CAACyB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAG9B;IACA;IACA;EACF;EAEA;EACAC,cAAc;IACZ,MAAMC,KAAK,GAAGX,YAAY,CAACK,OAAO,CAAC,cAAc,CAAC;IAClD,IAAI,CAACM,KAAK,EAAE;MACV,OAAO,KAAK;;IAGd;IACA;IACA;IACA;IACA;IACA;IAEA,OAAO,IAAI;EACb;EAAC;qBAlFU9B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA+B,SAAX/B,WAAW;IAAAgC,YAFV;EAAM","names":["HttpHeaders","environment","catchError","tap","AuthService","constructor","http","router","urlApi","headers","register","email","password","noSiren","role","roleType","post","url","httpOptions","login","pipe","response","accessToken","localStorage","setItem","roles","error","getAccountRole","getItem","getToken","logout","clear","navigate","isValidSession","token","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lea-l\\OneDrive\\Bureau\\PF_INSA\\projet-isitr\\AventixApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {environment} from \"../environment/environment\";\nimport { catchError, tap } from 'rxjs/operators';\nimport {Observable} from \"rxjs\";\nimport {Router} from \"@angular/router\";\n//import {catchError, Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private url = `${environment.urlApi}`\n\n  private httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  register(email: string, password: string, noSiren: number):Observable<any>{\n    const role = {\n      roleType: 'ROLE_USER_EMPLOYER'\n    };\n\n    return this.http.post(`${(this.url)}/signup`,\n      {\n        email,\n        password,\n        noSiren,\n        role\n      },\n      this.httpOptions\n    );\n\n  }\n\n  login(email: string, password: string):Observable<any>{\n    return this.http.post(`${(this.url)}/signin`,\n      {\n        email,\n        password\n      },\n      this.httpOptions\n      )\n      .pipe(\n        tap((response:any) =>{\n          if(response && response.accessToken){\n            localStorage.setItem(('access_token'), response.accessToken);\n            localStorage.setItem(('account_role'), response.roles)\n          }\n        }),\n        catchError((error) => {\n          throw error;\n        })\n      );\n  }\n\n  getAccountRole(): string | null {\n    return localStorage.getItem('account_role');\n  }\n\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  logout(): void {\n    // Clear the access token and the user's role\n    localStorage.clear();\n    this.router.navigate(['home'])\n\n\n    // Optionally, redirect the user to the login page or home page\n    // This depends on your routing setup\n    // this.router.navigate(['/login']);\n  }\n\n  // This could be part of your AuthService or a dedicated AuthGuard\n  isValidSession(): boolean {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      return false;\n    }\n\n    // Here you would add logic to check the token's validity\n    // For example, decode the JWT and check the exp claim, if applicable\n    // If the token is expired or invalid:\n    // localStorage.removeItem('access_token');\n    // localStorage.removeItem('account_role');\n    // return false;\n\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}