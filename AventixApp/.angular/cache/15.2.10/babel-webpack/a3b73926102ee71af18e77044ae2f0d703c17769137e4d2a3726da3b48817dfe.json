{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class NoRoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    const accountRole = this.authService.getAccountRole();\n    if (accountRole === 'ROLE_USER_EMPLOYER') {\n      return this.router.createUrlTree(['/employer/home']); // Redirect employers\n    } else if (accountRole === 'ROLE_ADMIN') {\n      return this.router.createUrlTree(['/admin/home']); // Redirect admins\n    }\n\n    return true; // Allow access if there's no role\n  }\n  static #_ = this.ɵfac = function NoRoleGuard_Factory(t) {\n    return new (t || NoRoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NoRoleGuard,\n    factory: NoRoleGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EACtBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,MAAMC,WAAW,GAAG,IAAI,CAACL,WAAW,CAACM,cAAc,EAAE;IAErD,IAAID,WAAW,KAAK,oBAAoB,EAAE;MACxC,OAAO,IAAI,CAACJ,MAAM,CAACM,aAAa,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;KACvD,MAAM,IAAIF,WAAW,KAAK,YAAY,EAAE;MACvC,OAAO,IAAI,CAACJ,MAAM,CAACM,aAAa,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;;IAGrD,OAAO,IAAI,CAAC,CAAC;EACf;EAAC;qBAhBUT,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAU,SAAXV,WAAW;IAAAW,YAFV;EAAM","names":["NoRoleGuard","constructor","authService","router","canActivate","next","state","accountRole","getAccountRole","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lea-l\\OneDrive\\Bureau\\PF_INSA\\projet-isitr\\AventixApp\\src\\app\\guards\\no-role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthService} from \"../auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoRoleGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    const accountRole = this.authService.getAccountRole();\n\n    if (accountRole === 'ROLE_USER_EMPLOYER') {\n      return this.router.createUrlTree(['/employer/home']); // Redirect employers\n    } else if (accountRole === 'ROLE_ADMIN') {\n      return this.router.createUrlTree(['/admin/home']); // Redirect admins\n    }\n\n    return true; // Allow access if there's no role\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}