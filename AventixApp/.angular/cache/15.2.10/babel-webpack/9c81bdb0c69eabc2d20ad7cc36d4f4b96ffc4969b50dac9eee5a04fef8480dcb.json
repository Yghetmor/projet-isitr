{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../environment/environment\";\nimport { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@auth0/angular-jwt\";\n//import {catchError, Observable} from 'rxjs';\nexport class AuthService {\n  constructor(http, router, jwtHelper) {\n    this.http = http;\n    this.router = router;\n    this.jwtHelper = jwtHelper;\n    this.url = `${environment.urlApi}`;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.roleSource = new BehaviorSubject(this.getAccountRole());\n    this.currentRole = this.roleSource.asObservable();\n  }\n  register(email, password, noSiren) {\n    const role = {\n      roleType: 'ROLE_USER_EMPLOYER'\n    };\n    return this.http.post(`${this.url}/signup`, {\n      email,\n      password,\n      noSiren,\n      role\n    }, this.httpOptions);\n  }\n  login(email, password) {\n    return this.http.post(`${this.url}/signin`, {\n      email,\n      password\n    }, this.httpOptions).pipe(tap(response => {\n      if (response && response.accessToken) {\n        localStorage.setItem('access_token', response.accessToken);\n        localStorage.setItem('account_role', response.roles);\n        // Log the specific attribute to ensure it's correct\n        console.log(\"idEmpl from response:\", response.idEmpl);\n        if (response.idEmpl !== undefined) {\n          localStorage.setItem('employer_id', response.idEmpl.toString());\n        }\n        this.roleSource.next(localStorage.getItem('account_role'));\n      }\n    }), catchError(error => {\n      throw error;\n    }));\n  }\n  getAccountRole() {\n    return localStorage.getItem('account_role');\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  logout() {\n    localStorage.clear();\n    this.roleSource.next(null);\n  }\n  // This could be part of your AuthService or a dedicated AuthGuard\n  isLoggedIn() {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      return false;\n    }\n    return true;\n  }\n  // just to check token form\n  decodeToken() {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      console.log(decodedToken);\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.JwtHelperService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","environment","catchError","tap","BehaviorSubject","AuthService","constructor","http","router","jwtHelper","urlApi","headers","getAccountRole","roleSource","asObservable","register","email","password","noSiren","role","roleType","post","url","httpOptions","login","pipe","response","accessToken","localStorage","setItem","roles","console","log","idEmpl","undefined","toString","next","getItem","error","getToken","logout","clear","isLoggedIn","token","decodeToken","decodedToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lea-l\\OneDrive\\Bureau\\PF_INSA\\projet-isitr\\AventixApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {environment} from \"../environment/environment\";\nimport { catchError, tap } from 'rxjs/operators';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {Router} from \"@angular/router\";\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\n//import {catchError, Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private url = `${environment.urlApi}`\n\n  private httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  private roleSource = new BehaviorSubject<string | null>(this.getAccountRole());\n  currentRole = this.roleSource.asObservable();\n\n  constructor(private http: HttpClient, private router: Router,\n              private jwtHelper: JwtHelperService) { }\n\n  register(email: string, password: string, noSiren: number):Observable<any>{\n    const role = {\n      roleType: 'ROLE_USER_EMPLOYER'\n    };\n\n    return this.http.post(`${(this.url)}/signup`,\n      {\n        email,\n        password,\n        noSiren,\n        role\n      },\n      this.httpOptions\n    );\n\n  }\n\n  login(email: string, password: string):Observable<any>{\n    return this.http.post(`${(this.url)}/signin`,\n      {\n        email,\n        password\n      },\n      this.httpOptions\n      )\n      .pipe(\n        tap((response:any) =>{\n          if(response && response.accessToken){\n            localStorage.setItem(('access_token'), response.accessToken);\n            localStorage.setItem(('account_role'), response.roles);\n            // Log the specific attribute to ensure it's correct\n            console.log(\"idEmpl from response:\", response.idEmpl);\n\n            if(response.idEmpl !== undefined) {\n              localStorage.setItem('employer_id', response.idEmpl.toString());\n            }\n\n\n\n            this.roleSource.next(localStorage.getItem('account_role'));\n          }\n        }),\n        catchError((error) => {\n          throw error;\n        })\n      );\n  }\n\n  getAccountRole(): string | null {\n    return localStorage.getItem('account_role');\n  }\n\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  logout(): void {\n    localStorage.clear();\n    this.roleSource.next(null);\n  }\n\n  // This could be part of your AuthService or a dedicated AuthGuard\n  isLoggedIn(): boolean {\n    const token = localStorage.getItem('access_token');\n    if (!token) {\n      return false;\n    }\n    return true;\n  }\n\n\n  // just to check token form\n  decodeToken() {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      console.log(decodedToken);\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}