{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route) {\n    const requiredRoles = route.data['requiredRoles'];\n    const userRole = this.authService.getAccountRole();\n    if (!requiredRoles.includes(userRole)) {\n      // Redirect user to an appropriate page\n      this.router.navigate(['/home']);\n      return false;\n    }\n    return true;\n  }\n  static #_ = this.ɵfac = function RoleGuard_Factory(t) {\n    return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RoleGuard,\n    factory: RoleGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B;IACvC,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI,CAAC,eAAe,CAAC;IACjD,MAAMC,QAAQ,GAAG,IAAI,CAACN,WAAW,CAACO,cAAc,EAAE;IAElD,IAAI,CAACH,aAAa,CAACI,QAAQ,CAACF,QAAQ,CAAC,EAAE;MACrC;MACA,IAAI,CAACL,MAAM,CAACQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAAC;qBAbUX,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAY,SAATZ,SAAS;IAAAa,YAFR;EAAM","names":["RoleGuard","constructor","authService","router","canActivate","route","requiredRoles","data","userRole","getAccountRole","includes","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lea-l\\OneDrive\\Bureau\\PF_INSA\\projet-isitr\\AventixApp\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthService} from \"../auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const requiredRoles = route.data['requiredRoles'];\n    const userRole = this.authService.getAccountRole();\n\n    if (!requiredRoles.includes(userRole)) {\n      // Redirect user to an appropriate page\n      this.router.navigate(['/home']);\n      return false;\n    }\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}